import{o as a,c as s,k as i,q as r,s as c,A as o,e,a6 as t}from"../modules/vue-3HNtz2Ni.js";import{I as p}from"./default-D9q62ZdG.js";import{_ as l,a9 as n}from"../index-td8_HWJJ.js";import{p as d,u as m,f as h}from"./context-Dd271oE6.js";import"../modules/shiki-DIk2-LAo.js";const u=e("h2",null,"Other Approaches/1",-1),f=e("div",{class:"dense"},[e("p",null,[t("– "),e("strong",null,"Runtime Web Components"),t(": each micro frontend is mounted at a custom HTML element, and the container performs instantiation.")]),e("p",null,[t("– "),e("strong",null,"Runtime Javascript integration"),t(": somewhat similar to both the previous approach and module federation, this one includes each micro frontend onto the page using a "),e("code",null,"<script>"),t(" tag; the container application becomes an entry point, decides which micro frontend to be mounted, and calls the relevant function telling the micro frontend when and where to get rendered; each build file can be deployed independently.")]),e("p",null,[t("– "),e("strong",null,"iFrames"),t(": this approach is about rendering various micro frontends in separate iframes and composing those via a container application; the most obvious benefit of this approach is complete decoupling of the application components; however, this approach also has some substantial cons like composition complexity and high potential for performance issues.")])],-1),_={__name:"4",setup(g){return d(n),m(),(v,b)=>(a(),s(p,r(c(o(h)(o(n),3))),{default:i(()=>[u,f]),_:1},16))}},C=l(_,[["__file","/@slidev/slides/4.md"]]);export{C as default};
