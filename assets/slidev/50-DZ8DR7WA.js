import{o as a,c as r,k as s,q as i,s as n,A as t,e}from"../modules/vue-3HNtz2Ni.js";import{I as p}from"./default-D9q62ZdG.js";import{_ as l,a_ as o}from"../index-td8_HWJJ.js";import{p as c,u as d,f as m}from"./context-Dd271oE6.js";import"../modules/shiki-DIk2-LAo.js";const h=e("h2",null,"Federated Types",-1),u=e("div",{class:"dense"},[e("p",null," When it comes to TypeScript applications, the most common problem with using external libraries (which can be federated remote modules) is that not all of them provide TypeScript types with the original code. In the context of module federation, this problem is aggravated by the fact that Webpack only loads resources from the federated module at runtime, TypeScript, however, needs those during compilation. In this case you have the following options:"),e("p",null,"– @module-federation/native-federation-typescript,"),e("p",null,"– @module-federation/typescript,"),e("p",null,"– packaging your types for distribution via a package registry (e.g., npm),"),e("p",null,"– referencing types across monorepo (if possible)."),e("p",null," Note that TypeScript plugins are the easiest way to handle federated types. They fetch the types at compile-time and store within the project in order to make them available to tsc whenever it’s needed. ")],-1),f={__name:"50",setup(y){return c(o),d(),(_,g)=>(a(),r(p,i(n(t(m)(t(o),49))),{default:s(()=>[h,u]),_:1},16))}},T=l(f,[["__file","/@slidev/slides/50.md"]]);export{T as default};
